{"version":3,"file":"items.umd.min.js","sources":["../../src/helpers.ts","../../src/create.ts","../../src/add.ts","../../src/get.ts","../../src/protect.ts","../../src/remove.ts","../../src/search.ts","../../src/update.ts"],"sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { IItemAdd, IItemUpdate, IItem } from \"@esri/arcgis-rest-common-types\";\n\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\nexport interface IItemRequestOptions extends IUserRequestOptions {\n  item: IItem;\n}\n\nexport interface IItemIdRequestOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport interface IFolderIdRequestOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the folder.\n   */\n  folderId: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport type ItemRelationshipType =\n  | \"Map2Service\"\n  | \"WMA2Code\"\n  | \"Map2FeatureCollection\"\n  | \"MobileApp2Code\"\n  | \"Service2Data\"\n  | \"Service2Service\"\n  | \"Map2AppConfig\"\n  | \"Item2Attachment\"\n  | \"Item2Report\"\n  | \"Listed2Provisioned\"\n  | \"Style2Style\"\n  | \"Service2Style\"\n  | \"Survey2Service\"\n  | \"Survey2Data\"\n  | \"Service2Route\"\n  | \"Area2Package\"\n  | \"Map2Area\"\n  | \"Service2Layer\"\n  | \"Area2CustomPackage\";\n\nexport interface IItemRelationshipRequestOptions extends IRequestOptions {\n  /**\n   * Id of the item.\n   */\n  id: string;\n  /**\n   * The type of relationship between the two items.\n   */\n  relationshipType: ItemRelationshipType | ItemRelationshipType[];\n  /**\n   * The direction of the relationship. Either forward (from origin -> destination) or reverse (from destination -> origin).\n   */\n  direction?: \"forward\" | \"reverse\";\n}\n\nexport interface IManageItemRelationshipRequestOptions\n  extends IUserRequestOptions {\n  originItemId: string;\n  destinationItemId: string;\n  relationshipType: ItemRelationshipType;\n}\n\nexport interface IItemResourceRequestOptions extends IItemIdRequestOptions {\n  /**\n   * New resource filename.\n   */\n  name?: string;\n  /**\n   * Text input to be added as a file resource.\n   */\n  content?: string;\n  /**\n   * Controls whether access to the file resource is restricted to the owner or inherited from the sharing permissions set for the associated item.\n   */\n  private?: boolean;\n  resource?: any;\n}\n\nexport interface IItemCrudRequestOptions extends IUserRequestOptions {\n  /**\n   * The owner of the item. If this property is not present, `item.owner` will be passed, or lastly `authentication.username`.\n   */\n  owner?: string;\n  /**\n   * Id of the folder to house the item.\n   */\n  folder?: string;\n}\n\nexport interface IItemDataRequestOptions extends IRequestOptions {\n  /**\n   * Used to request binary data.\n   */\n  file?: boolean;\n}\n\nexport interface IItemUpdateResponse {\n  success: boolean;\n  id: string;\n}\n\nexport interface IItemAddResponse extends IItemUpdateResponse {\n  folder: string;\n}\n\nexport interface IItemResourceResponse {\n  success: boolean;\n  itemId: string;\n  owner: string;\n  folder: string;\n}\n\nexport interface IAddFolderResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Information about created folder: its alphanumeric id, name, and owner's name.\n   */\n  folder: {\n    id: string;\n    title: string;\n    username: string;\n  };\n}\n\nexport interface IItemMoveResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Alphanumeric id of moved item.\n   */\n  itemId: string;\n  /**\n   * Name of owner of item.\n   */\n  owner: string;\n  /**\n   * Alphanumeric id of folder now housing item.\n   */\n  folder: string;\n}\n\n/**\n * Serialize an item and its data into a json format accepted by the Portal API for create and update operations\n *\n * @param item Item to be serialized\n * @returns a formatted json object to be sent to Portal\n */\nexport function serializeItem(item: IItemAdd | IItemUpdate | IItem): any {\n  // create a clone so we're not messing with the original\n  const clone = JSON.parse(JSON.stringify(item));\n\n  // convert .data to .text\n  if (clone.data) {\n    clone.text = clone.data;\n    delete clone.data;\n  }\n\n  return clone;\n}\n\n/**\n * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.\n */\nexport function determineOwner(requestOptions: any): string {\n  if (requestOptions.owner) {\n    return requestOptions.owner;\n  }\n  if (requestOptions.item && requestOptions.item.owner) {\n    return requestOptions.item.owner;\n  } else {\n    return requestOptions.authentication.username;\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, getPortalUrl } from \"@esri/arcgis-rest-request\";\n\nimport { IItemAdd } from \"@esri/arcgis-rest-common-types\";\n\nimport {\n  IAddFolderResponse,\n  IItemAddResponse,\n  IItemCrudRequestOptions,\n  serializeItem,\n  determineOwner\n} from \"./helpers\";\n\nexport interface IAddFolderRequestOptions extends IItemCrudRequestOptions {\n  /**\n   * Name of the folder to create.\n   */\n  title: string;\n}\n\nexport interface IItemAddRequestOptions extends IItemCrudRequestOptions {\n  item: IItemAdd;\n}\n\n/**\n * ```js\n * import { createFolder } from '@esri/arcgis-rest-items';\n * //\n * createFolder({\n *   title: 'Map Collection',\n *   authentication: userSession\n * })\n *   .then(response)\n * ```\n * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with folder details once the folder has been created\n */\nexport function createFolder(\n  requestOptions: IAddFolderRequestOptions\n): Promise<IAddFolderResponse> {\n  const owner = determineOwner(requestOptions);\n\n  const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n  const url = `${baseUrl}/createFolder`;\n\n  requestOptions.params = {\n    title: requestOptions.title,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { createItemInFolder } from '@esri/arcgis-rest-items';\n * //\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\",\n *     data: {}\n *   },\n *   folder: 'underwater',\n *   authentication\n * })\n * ```\n * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions = Options for the request\n */\nexport function createItemInFolder(\n  requestOptions: IItemAddRequestOptions\n): Promise<IItemAddResponse> {\n  const owner = determineOwner(requestOptions);\n\n  const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n  let url = `${baseUrl}/addItem`;\n\n  if (requestOptions.folder) {\n    url = `${baseUrl}/${requestOptions.folder}/addItem`;\n  }\n\n  // serialize the item into something Portal will accept\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...serializeItem(requestOptions.item)\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { createItem } from '@esri/arcgis-rest-items';\n * //\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\",\n *     data: {}\n *   },\n *   authentication\n * })\n * ```\n * Create an Item in the user's root folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that creates an item.\n */\nexport function createItem(\n  requestOptions: IItemAddRequestOptions\n): Promise<IItemAddResponse> {\n  // delegate to createItemInFolder placing in the root of the filestore\n  const options = {\n    folder: null,\n    ...requestOptions\n  } as IItemAddRequestOptions;\n  return createItemInFolder(options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  getPortalUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  IItemIdRequestOptions,\n  IItemResourceRequestOptions,\n  IItemAddResponse,\n  IItemResourceResponse,\n  determineOwner,\n  IManageItemRelationshipRequestOptions\n} from \"./helpers\";\n\nexport interface IItemDataAddRequestOptions extends IItemIdRequestOptions {\n  /**\n   * Object to store\n   */\n  data: any;\n}\n\nexport interface IItemResourceAddRequestOptions\n  extends IItemResourceRequestOptions {\n  /**\n   * Object to store\n   */\n  resource: any;\n}\n\n/**\n * ```js\n * import { addItemJsonData } from '@esri/arcgis-rest-items';\n * //\n * addItemJsonData({\n *   id: '3ef',\n *   data: {}\n *   authentication\n * })\n *   .then(response)\n * ```\n * Send json to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with an object reporting\n *        success/failure and echoing the item id.\n */\nexport function addItemJsonData(\n  requestOptions: IItemDataAddRequestOptions\n): Promise<IItemAddResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/update`;\n\n  // Portal API requires that the 'data' be stringified and POSTed in\n  // a `text` form field. It can also be sent with the `.create` call by sending\n  // a `.data` property.\n  requestOptions.params = {\n    text: requestOptions.data,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { addItemData } from '@esri/arcgis-rest-items';\n * //\n * addItemData({\n *   id: '3ef',\n *   data: file,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Send a file or blob to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with an object reporting\n *        success/failure and echoing the item id.\n */\nexport function addItemData(\n  requestOptions: IItemDataAddRequestOptions\n): Promise<IItemAddResponse> {\n  const owner = determineOwner(requestOptions);\n\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/update`;\n\n  // Portal API requires that the 'data' be POSTed in a `file` form field.\n  requestOptions.params = {\n    file: requestOptions.data,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { addItemRelationship } from '@esri/arcgis-rest-items';\n * //\n * addItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-relationship.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemRelationship(\n  requestOptions: IManageItemRelationshipRequestOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/content/users/${owner}/addRelationship`;\n\n  const options = { params: {}, ...requestOptions };\n  appendCustomParams(requestOptions, options);\n\n  return request(url, options);\n}\n\n/**\n * ```js\n * import { addItemResource } from '@esri/arcgis-rest-items';\n * //\n * addItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemResource(\n  requestOptions: IItemResourceAddRequestOptions\n): Promise<IItemResourceResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/addResources`;\n\n  requestOptions.params = {\n    file: requestOptions.resource,\n    fileName: requestOptions.name,\n    text: requestOptions.content,\n    access: requestOptions.private ? \"private\" : \"inherit\",\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  getPortalUrl\n} from \"@esri/arcgis-rest-request\";\n\nimport { IItem, IGroup } from \"@esri/arcgis-rest-common-types\";\n\nimport {\n  IItemIdRequestOptions,\n  IItemDataRequestOptions,\n  IItemRelationshipRequestOptions\n} from \"./helpers\";\n\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-items\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IItem> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-items\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(\n  id: string,\n  requestOptions?: IItemDataRequestOptions\n): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}/data`;\n  // default to a GET request\n  const options: IItemDataRequestOptions = {\n    ...{ httpMethod: \"GET\", params: {} },\n    ...requestOptions\n  };\n\n  if (options.file) {\n    options.params.f = null;\n  }\n\n  return request(url, options);\n}\n\nexport interface IGetRelatedItemsResponse {\n  total: number;\n  relatedItems: IItem[];\n}\n\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-items\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(\n  requestOptions: IItemRelationshipRequestOptions\n): Promise<IGetRelatedItemsResponse> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${\n    requestOptions.id\n  }/relatedItems`;\n\n  const options: IItemRelationshipRequestOptions = {\n    httpMethod: \"GET\",\n    params: {\n      direction: requestOptions.direction\n    },\n    ...requestOptions\n  };\n\n  if (typeof requestOptions.relationshipType === \"string\") {\n    options.params.relationshipType = requestOptions.relationshipType;\n  } else {\n    options.params.relationshipTypes = requestOptions.relationshipType;\n  }\n\n  delete options.direction;\n  delete options.relationshipType;\n\n  return request(url, options);\n}\n\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(\n  requestOptions: IItemIdRequestOptions\n): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${\n    requestOptions.id\n  }/resources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    ...requestOptions.params,\n    num: 1000\n  };\n  // at v2, the argument signature of this method should match getItemData() and getItemGroups() if requests can be made anonymously\n  return request(url, requestOptions);\n}\n\nexport interface IItemGroupResponse {\n  admin?: IGroup[];\n  member?: IGroup[];\n  other?: IGroup[];\n}\n\n/**\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-items\";\n * //\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IItemGroupResponse> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}/groups`;\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, getPortalUrl } from \"@esri/arcgis-rest-request\";\n\nimport { IItemIdRequestOptions, determineOwner } from \"./helpers\";\n\n/**\n * Protect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/protect.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to protect an item.\n */\nexport function protectItem(\n  requestOptions: IItemIdRequestOptions\n): Promise<any> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/protect`;\n  return request(url, requestOptions);\n}\n\n/**\n * Unprotect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unprotect.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to unprotect an item.\n */\nexport function unprotectItem(\n  requestOptions: IItemIdRequestOptions\n): Promise<any> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/unprotect`;\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, getPortalUrl, appendCustomParams } from \"@esri/arcgis-rest-request\";\n\nimport {\n  IItemIdRequestOptions,\n  IItemResourceRequestOptions,\n  IFolderIdRequestOptions,\n  determineOwner,\n  IManageItemRelationshipRequestOptions\n} from \"./helpers\";\n\n/**\n * ```js\n * import { removeItem } from '@esri/arcgis-rest-items';\n * //\n * removeItem({\n *   id: \"3ef\",\n *   authentication\n * })\n * ```\n * Delete an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item.\n */\nexport function removeItem(\n  requestOptions: IItemIdRequestOptions\n): Promise<any> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/delete`;\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { removeItemRelationship } from '@esri/arcgis-rest-items';\n * //\n * removeItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Remove a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-relationship.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function removeItemRelationship(\n  requestOptions: IManageItemRelationshipRequestOptions\n): Promise<{ \"success\": boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/removeRelationship`;\n\n  const options = { params: {}, ...requestOptions }\n  appendCustomParams(requestOptions, options);\n\n  return request(url, options);\n}\n\n/**\n * Remove a resource associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item resource.\n */\nexport function removeItemResource(\n  requestOptions: IItemResourceRequestOptions\n): Promise<any> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/removeResources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    ...requestOptions.params,\n    resource: requestOptions.resource\n  };\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { removeFolder } from \"@esri/arcgis-rest-items\";\n * //\n * removeFolder({\n *   folderId: \"fe4\",\n *   owner: \"c@sey\",\n *   authentication\n * })\n *   .then(response)\n *\n * ```\n * Delete a non-root folder and all the items it contains. See the [REST\n * Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-folder.htm) for\n * more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes a folder\n */\nexport function removeFolder(\n  requestOptions: IFolderIdRequestOptions\n): Promise<{\n  success: boolean;\n  folder: {\n    username: string;\n    id: string;\n    title: string;\n  };\n}> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/content/users/${encodeURIComponent(owner)}/${\n    requestOptions.folderId\n  }/delete`;\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  getPortalUrl\n} from \"@esri/arcgis-rest-request\";\n\nimport { IPagingParams, IItem } from \"@esri/arcgis-rest-common-types\";\n\n// this interface still needs to be docced\nexport interface ISearchRequest extends IPagingParams {\n  q: string;\n  [key: string]: any;\n}\n\nexport interface ISearchRequestOptions extends IRequestOptions {\n  searchForm?: ISearchRequest;\n}\n\n/**\n * Options to pass through when searching for items.\n */\nexport interface ISearchResult {\n  query: string; // matches the api's form param\n  total: number;\n  start: number;\n  num: number;\n  nextStart: number;\n  results: IItem[];\n}\n\n/**\n * ```js\n * import { searchItems } from '@esri/arcgis-rest-items';\n * //\n * searchItems('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchItems(\n  search: string | ISearchRequestOptions\n): Promise<ISearchResult> {\n  let options: ISearchRequestOptions = {\n    httpMethod: \"GET\",\n    params: {}\n  };\n\n  if (typeof search === \"string\") {\n    options.params.q = search;\n  } else {\n    // mixin user supplied requestOptions with defaults\n    options = {\n      ...options,\n      ...search\n    };\n\n    // mixin arbitrary request parameters with search form\n    options.params = {\n      ...search.params,\n      ...search.searchForm\n    };\n  }\n\n  // construct the search url\n  const url = `${getPortalUrl(options)}/search`;\n\n  // send the request\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, getPortalUrl } from \"@esri/arcgis-rest-request\";\n\nimport { IItemUpdate } from \"@esri/arcgis-rest-common-types\";\n\nimport {\n  IItemCrudRequestOptions,\n  IItemMoveResponse,\n  IItemResourceRequestOptions,\n  IItemUpdateResponse,\n  serializeItem,\n  determineOwner\n} from \"./helpers\";\n\nexport interface IItemUpdateRequestOptions extends IItemCrudRequestOptions {\n  item: IItemUpdate;\n}\n\nexport interface IItemMoveRequestOptions extends IItemCrudRequestOptions {\n  /**\n   * Alphanumeric id of item to be moved.\n   */\n  itemId: string;\n  /**\n   * Alphanumeric id of folder to house moved item. If null, empty, or \"/\", the destination is the\n   * root folder.\n   */\n  folderId?: string;\n}\n\n/**\n * ```js\n * import { updateItem } from '@esri/arcgis-rest-items';\n * //\n * updateItem({\n *   item: {\n *     id: \"3ef\",\n *     description: \"A three hour tour\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param item - The item to update.\n * @param requestOptions - Options for the request.\n * @returns A Promise that updates an item.\n */\nexport function updateItem(\n  requestOptions: IItemUpdateRequestOptions\n): Promise<IItemUpdateResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.item.id\n  }/update`;\n\n  // serialize the item into something Portal will accept\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...serializeItem(requestOptions.item)\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { updateItemResource } from '@esri/arcgis-rest-items';\n * //\n * updateItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item resource.\n */\nexport function updateItemResource(\n  requestOptions: IItemResourceRequestOptions\n): Promise<any> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/updateResources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    file: requestOptions.resource,\n    fileName: requestOptions.name,\n    text: requestOptions.content,\n    ...requestOptions.params\n  };\n\n  // only override whatever access was specified previously if 'private' was passed explicitly\n  if (typeof requestOptions.private !== \"undefined\") {\n    requestOptions.params.access = requestOptions.private\n      ? \"private\"\n      : \"inherit\";\n  }\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { moveItem } from '@esri/arcgis-rest-items';\n * //\n * moveItem({\n *   itemId: \"3ef\",\n *   folderId: \"7c5\",\n *   authentication: userSession\n * })\n * ```\n * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with owner and folder details once the move has been completed\n */\nexport function moveItem(\n  requestOptions: IItemMoveRequestOptions\n): Promise<IItemMoveResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.itemId\n  }/move`;\n\n  let folderId = requestOptions.folderId;\n  if (!folderId) {\n    folderId = \"/\";\n  }\n  requestOptions.params = {\n    folder: folderId,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n"],"names":["item","clone","JSON","parse","stringify","data","text","requestOptions","owner","authentication","username","determineOwner","baseUrl","getPortalUrl","url","folder","params","serializeItem","request","id","file","options","appendCustomParams","resource","fileName","name","content","access","private","title","createItemInFolder","tslib_1.__assign","httpMethod","f","direction","relationshipType","relationshipTypes","num","encodeURIComponent","folderId","search","q","searchForm","itemId"],"mappings":"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"}