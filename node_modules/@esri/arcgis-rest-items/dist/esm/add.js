/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
import * as tslib_1 from "tslib";
import { request, getPortalUrl, appendCustomParams } from "@esri/arcgis-rest-request";
import { determineOwner } from "./helpers";
/**
 * ```js
 * import { addItemJsonData } from '@esri/arcgis-rest-items';
 * //
 * addItemJsonData({
 *   id: '3ef',
 *   data: {}
 *   authentication
 * })
 *   .then(response)
 * ```
 * Send json to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
export function addItemJsonData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be stringified and POSTed in
    // a `text` form field. It can also be sent with the `.create` call by sending
    // a `.data` property.
    requestOptions.params = tslib_1.__assign({ text: requestOptions.data }, requestOptions.params);
    return request(url, requestOptions);
}
/**
 * ```js
 * import { addItemData } from '@esri/arcgis-rest-items';
 * //
 * addItemData({
 *   id: '3ef',
 *   data: file,
 *   authentication
 * })
 *   .then(response)
 * ```
 * Send a file or blob to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
export function addItemData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be POSTed in a `file` form field.
    requestOptions.params = tslib_1.__assign({ file: requestOptions.data }, requestOptions.params);
    return request(url, requestOptions);
}
/**
 * ```js
 * import { addItemRelationship } from '@esri/arcgis-rest-items';
 * //
 * addItemRelationship({
 *   originItemId: '3ef',
 *   destinationItemId: 'ae7',
 *   relationshipType: 'Service2Layer',
 *   authentication
 * })
 *   .then(response)
 * ```
 * Add a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-relationship.htm) for more information.
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to add item resources.
 */
export function addItemRelationship(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/addRelationship";
    var options = tslib_1.__assign({ params: {} }, requestOptions);
    appendCustomParams(requestOptions, options);
    return request(url, options);
}
/**
 * ```js
 * import { addItemResource } from '@esri/arcgis-rest-items';
 * //
 * addItemResource({
 *   id: '3ef',
 *   resource: file,
 *   name: 'bigkahuna.jpg',
 *   authentication
 * })
 *   .then(response)
 * ```
 * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to add item resources.
 */
export function addItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/addResources";
    requestOptions.params = tslib_1.__assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content, access: requestOptions.private ? "private" : "inherit" }, requestOptions.params);
    return request(url, requestOptions);
}
//# sourceMappingURL=add.js.map