{"version":3,"file":"request.umd.min.js","sources":["../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../src/utils/encode-form-data.ts","../../src/utils/ArcGISRequestError.ts","../../src/request.ts","../../src/utils/ErrorTypes.ts","../../src/utils/clean-url.ts","../../src/utils/get-portal-url.ts","../../src/utils/get-portal.ts","../../src/utils/warn.ts","../../src/utils/append-custom-params.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n* Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some(key => {\n    const value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach(key => {\n    const param = params[key];\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of objects to be stringified\n        // or an array of non-objects to be comma-separated\n        value =\n          param[0] &&\n          param[0].constructor &&\n          param[0].constructor.name === \"Object\"\n            ? JSON.stringify(param)\n            : param.join(\",\");\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\") {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params\";\n\nexport function encodeParam(key: string, value: any) {\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params\";\nimport { encodeQueryString } from \"./encode-query-string\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(params: any): FormData | string {\n  const useFormData = requiresFormData(params);\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"../request\";\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISRequestError {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\nArcGISRequestError.prototype = Object.create(Error.prototype);\nArcGISRequestError.prototype.constructor = ArcGISRequestError;\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data\";\nimport { encodeQueryString } from \"./utils/encode-query-string\";\nimport { requiresFormData } from \"./utils/process-params\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError\";\nimport { IRetryAuthError } from \"./utils/retryAuthError\";\nimport { HTTPMethods, IParams, ITokenRequestOptions } from \"./utils/params\";\n\n/**\n * Authentication can be supplied to `request` via [`UserSession`](../../auth/UserSession/) or [`ApplicationSession`](../../auth/ApplicationSession/). Both classes extend `IAuthenticationManager`.\n * ```js\n * const session = new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\",\n *   // optional\n *   portal: \"https://[yourserver]/arcgis/sharing/rest\"\n * })\n *\n * request(url, { authentication: session })\n * ```\n */\nexport interface IAuthenticationManager {\n  /**\n   * Defaults to 'https://www.arcgis.com/sharing/rest'.\n   */\n  portal: string;\n  getToken(url: string, requestOptions?: ITokenRequestOptions): Promise<string>;\n}\n\n/**\n * Options for the `request()` method.\n */\nexport interface IRequestOptions {\n  /**\n   * Additional parameters to pass in the request.\n   */\n  params?: IParams;\n\n  /**\n   * The HTTP method to send the request with.\n   */\n  httpMethod?: HTTPMethods;\n\n  /**\n   * Return the raw [response](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n   */\n  rawResponse?: boolean;\n\n  /**\n   * The instance of `IAuthenticationManager` to use to authenticate this request.\n   */\n  authentication?: IAuthenticationManager;\n\n  /**\n   * Base url for the portal you want to make the request to. Defaults to 'https://www.arcgis.com/sharing/rest'.\n   */\n  portal?: string;\n\n  /**\n   * The implementation of `fetch` to use. Defaults to a global `fetch`.\n   */\n  fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\n\n  /**\n   * If the length of a GET request's URL exceeds `maxUrlLength` the request will use POST instead.\n   */\n  maxUrlLength?: number;\n\n  /**\n   * Additional [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) to pass into the request.\n   */\n  headers?: { [key: string]: any };\n}\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\n/**\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n * //\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n * //\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n * //\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const options: IRequestOptions = {\n    httpMethod: \"POST\",\n    ...requestOptions\n  };\n\n  const missingGlobals: string[] = [];\n  const recommendedPackages: string[] = [];\n\n  // don't check for a global fetch if a custom implementation was passed through\n  if (!options.fetch && typeof fetch !== \"undefined\") {\n    options.fetch = fetch.bind(Function(\"return this\")());\n  } else {\n    missingGlobals.push(\"`fetch`\");\n    recommendedPackages.push(\"`isomorphic-fetch`\");\n  }\n\n  if (typeof Promise === \"undefined\") {\n    missingGlobals.push(\"`Promise`\");\n    recommendedPackages.push(\"`es6-promise`\");\n  }\n\n  if (typeof FormData === \"undefined\") {\n    missingGlobals.push(\"`FormData`\");\n    recommendedPackages.push(\"`isomorphic-form-data`\");\n  }\n\n  if (\n    !options.fetch ||\n    typeof Promise === \"undefined\" ||\n    typeof FormData === \"undefined\"\n  ) {\n    throw new Error(\n      `\\`arcgis-rest-request\\` requires global variables for \\`fetch\\`, \\`Promise\\` and \\`FormData\\` to be present in the global scope. You are missing ${missingGlobals.join(\n        \", \"\n      )}. We recommend installing the ${recommendedPackages.join(\n        \", \"\n      )} modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.`\n    );\n  }\n\n  const { httpMethod, authentication, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...requestOptions.params\n  };\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    // ensures behavior mimics XMLHttpRequest. needed to support sending IWA cookies\n    credentials: \"same-origin\"\n  };\n\n  return (authentication\n    ? authentication.getToken(url, {\n        fetch: options.fetch\n      })\n    : Promise.resolve(\"\")\n  )\n    .then(token => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (fetchOptions.method === \"GET\") {\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          options.maxUrlLength &&\n          urlWithQueryString.length > options.maxUrlLength\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params);\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestOptions.headers\n      };\n\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params)) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      return options.fetch(url, fetchOptions);\n    })\n    .then(response => {\n      if (!response.ok) {\n        // server responded w/ an actual error (404, 500, etc)\n        const { status, statusText } = response;\n        throw new ArcGISRequestError(\n          statusText,\n          `HTTP ${status}`,\n          response,\n          url,\n          options\n        );\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then(data => {\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        return checkForErrors(data, url, params, options);\n      } else {\n        return data;\n      }\n    });\n}\n\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 3) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      getSession(this.url, this.options)\n        .then(session => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          tries = tries + 1;\n          return request(this.url, newOptions);\n        })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (\n      code === 498 ||\n      code === 499 ||\n      messageCode === \"GWM_0003\" ||\n      (code === 400 && message === \"Unable to generate token.\")\n    ) {\n      throw new ArcGISAuthError(message, errorCode, response, url, options);\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code: string = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\"\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { IRequestOptions } from \"../request\";\nimport { cleanUrl } from \"./clean-url\";\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither are present, `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions: IRequestOptions = {}): string {\n  // use portal in options if specified\n  if (requestOptions.portal) {\n    return cleanUrl(requestOptions.portal);\n  }\n\n  // if auth was passed, use that portal\n  if (requestOptions.authentication) {\n    // the portal url is already scrubbed in the auth package\n    return requestOptions.authentication.portal;\n  }\n\n  // default to arcgis.com\n  return \"https://www.arcgis.com/sharing/rest\";\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"../request\";\n\nimport { getPortalUrl } from \"./get-portal-url\";\n\nexport interface IPortal {\n  id: string;\n  isPortal: boolean;\n  name: string;\n  [key: string]: any;\n}\n\n/**\n * Get the portal\n * @param requestOptions\n */\nexport function getSelf(requestOptions?: IRequestOptions): Promise<IPortal> {\n  // just delegate to getPortal w/o an id\n  return getPortal(null, requestOptions);\n}\n\n/**\n * ```js\n * import { getPortal } from \"@esri/arcgis-rest-request\";\n * //\n * getPortal()\n * getPortal(\"fe8\")\n * getPortal(null, { portal: \"https://custom.maps.arcgis.com/sharing/rest/\" })\n * ```\n * Fetch information about the current portal by id. If no id is passed, portals/self will be called\n * @param id\n * @param requestOptions\n */\nexport function getPortal(\n  id?: string,\n  requestOptions?: IRequestOptions\n): Promise<IPortal> {\n  // construct the search url\n  const idOrSelf = id ? id : \"self\";\n  const url = `${getPortalUrl(requestOptions)}/portals/${idOrSelf}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n\n  // send the request\n  return request(url, options);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"../request\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams(\n  oldOptions: IRequestOptions,\n  newOptions: IRequestOptions\n) {\n  // at v2.0.0, this should be refactored as a nonmutating method that takes a single argument, mixes in everything and returns a new instance of IRequestOptions\n\n  // only pass query parameters through in the request, not generic IRequestOptions props\n  Object.keys(oldOptions).forEach(function(key: string) {\n    if (\n      key !== \"url\" &&\n      key !== \"params\" &&\n      key !== \"authentication\" &&\n      key !== \"httpMethod\" &&\n      key !== \"fetch\" &&\n      key !== \"portal\" &&\n      key !== \"maxUrlLength\" &&\n      key !== \"headers\" &&\n      key !== \"endpoint\" &&\n      key !== \"decodeValues\"\n    ) {\n      newOptions.params[key] = (oldOptions as { [key: string]: any })[key];\n    }\n  });\n}\n"],"names":["params","Object","keys","some","key","value","constructor","name","newParams","forEach","param","JSON","stringify","join","valueOf","encodeURIComponent","processParams","map","encodeParam","useFormData","requiresFormData","formData_1","FormData","Blob","filename","append","encodeQueryString","message","code","response","url","options","this","originalMessage","ArcGISRequestError","prototype","create","Error","NODEJS_DEFAULT_REFERER_HEADER","requestOptions","f","httpMethod","missingGlobals","recommendedPackages","fetch","push","bind","Function","Promise","authentication","rawResponse","fetchOptions","method","credentials","getToken","resolve","then","token","length","urlWithQueryString","maxUrlLength","body","encodeFormData","headers","window","referer","ok","status_1","statusText","json","text","blob","data","checkForErrors","ErrorTypes","_super","_this","tslib_1.__extends","ArcGISAuthError","getSession","retryLimit","tries","retryRequest","reject","session","newOptions","request","catch","e","error","_a","messageCode","errorCode","status","parse","statusMessage","trim","slice","portal","cleanUrl","id","idOrSelf","getPortalUrl","console","warn","apply","getPortal","oldOptions"],"mappings":"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"}