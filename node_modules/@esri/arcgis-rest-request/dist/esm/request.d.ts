import { ArcGISRequestError } from "./utils/ArcGISRequestError";
import { IRetryAuthError } from "./utils/retryAuthError";
import { HTTPMethods, IParams, ITokenRequestOptions } from "./utils/params";
/**
 * Authentication can be supplied to `request` via [`UserSession`](../../auth/UserSession/) or [`ApplicationSession`](../../auth/ApplicationSession/). Both classes extend `IAuthenticationManager`.
 * ```js
 * const session = new UserSession({
 *   username: "jsmith",
 *   password: "123456",
 *   // optional
 *   portal: "https://[yourserver]/arcgis/sharing/rest"
 * })
 *
 * request(url, { authentication: session })
 * ```
 */
export interface IAuthenticationManager {
    /**
     * Defaults to 'https://www.arcgis.com/sharing/rest'.
     */
    portal: string;
    getToken(url: string, requestOptions?: ITokenRequestOptions): Promise<string>;
}
/**
 * Options for the `request()` method.
 */
export interface IRequestOptions {
    /**
     * Additional parameters to pass in the request.
     */
    params?: IParams;
    /**
     * The HTTP method to send the request with.
     */
    httpMethod?: HTTPMethods;
    /**
     * Return the raw [response](https://developer.mozilla.org/en-US/docs/Web/API/Response)
     */
    rawResponse?: boolean;
    /**
     * The instance of `IAuthenticationManager` to use to authenticate this request.
     */
    authentication?: IAuthenticationManager;
    /**
     * Base url for the portal you want to make the request to. Defaults to 'https://www.arcgis.com/sharing/rest'.
     */
    portal?: string;
    /**
     * The implementation of `fetch` to use. Defaults to a global `fetch`.
     */
    fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
    /**
     * If the length of a GET request's URL exceeds `maxUrlLength` the request will use POST instead.
     */
    maxUrlLength?: number;
    /**
     * Additional [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) to pass into the request.
     */
    headers?: {
        [key: string]: any;
    };
}
export declare const NODEJS_DEFAULT_REFERER_HEADER = "@esri/arcgis-rest-js";
/**
 * ```js
 * import { request } from '@esri/arcgis-rest-request';
 * //
 * request('https://www.arcgis.com/sharing/rest')
 *   .then(response) // response.currentVersion === 5.2
 * //
 * request('https://www.arcgis.com/sharing/rest', {
 *   httpMethod: "GET"
 * })
 * //
 * request('https://www.arcgis.com/sharing/rest/search', {
 *   params: { q: 'parks' }
 * })
 *   .then(response) // response.total => 78379
 * ```
 * Generic method for making HTTP requests to ArcGIS REST API endpoints.
 *
 * @param url - The URL of the ArcGIS REST API endpoint.
 * @param requestOptions - Options for the request, including parameters relevant to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
export declare function request(url: string, requestOptions?: IRequestOptions): Promise<any>;
export declare class ArcGISAuthError extends ArcGISRequestError {
    /**
     * Create a new `ArcGISAuthError`  object.
     *
     * @param message - The error message from the API
     * @param code - The error code from the API
     * @param response - The original response from the API that caused the error
     * @param url - The original url of the request
     * @param options - The original options of the request
     */
    constructor(message?: string, code?: string | number, response?: any, url?: string, options?: IRequestOptions);
    retry(getSession: IRetryAuthError, retryLimit?: number): Promise<{}>;
}
/**
 * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.
 *
 * @param data The response JSON to check for errors.
 * @param url The url of the original request
 * @param params The parameters of the original request
 * @param options The options of the original request
 * @returns The data that was passed in the `data` parameter
 */
export declare function checkForErrors(response: any, url?: string, params?: IParams, options?: IRequestOptions): any;
